import scipy.io as sio
mat_contents = sio.loadmat('cu_ecg_small_data_50.mat')  # 예시: XTrain.mat 파일 불러오기

mat_file_train = sio.loadmat('cu_ecg_small_data_50.mat') # Train 데이터 Mat 파일 불러오기
mat_file_test = sio.loadmat('cu_ecg_small_data_50.mat') # Test 데이터 Mat 파일 불러오기

X_train = mat_file_train['XTrain'] # Train 데이터 추출
X_test = mat_file_test['XTest'] # Test 데이터 추출

y_train = mat_file_train['YTrain'] # Train 레이블 추출
y_test = mat_file_test['YTest'] # Test 레이블 추출

from keras.utils import to_categorical

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)


from keras.utils import to_categorical

y_train = to_categorical(y_train)


from keras.utils import to_categorical

y_test = to_categorical(y_test)

print(X_train.shape)

# 데이터 크기 조절
X_train = X_train[:2000, :]
y_train = y_train[:2000]

X_test = X_test[:1000, :]
y_test = y_test[:1000]

from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D

model = Sequential()
model.add(Conv2D(16, kernel_size=3, activation='relu', input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, kernel_size=3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.summary()

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

import numpy as np
from keras.utils import np_utils
from keras.datasets import mnist

# MNIST 데이터 로드
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# 데이터 전처리
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], X_train.shape[2], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], X_test.shape[2], 1))

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# 정규화
X_train /= 255
X_test /= 255

# one-hot encoding
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))


model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
              
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))
